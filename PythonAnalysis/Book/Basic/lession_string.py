# -*- coding: utf-8 -*-
# ---------------------------------------
#   程序：Python的字符串
#   版本：1.0
#   作者：zhong
#   日期：2017-04-24
#   语言：Python 2.7
# ---------------------------------------



# 注意点
# ==> a. 单引号和双引号的嵌套
#        1. "what's your name"
#        2. 'what\'s your name'
print('what\'s your name')

# ==> b. 字符串的简单操作 +(拼接)
print("py" + "thon")

# ==> c. 打印字符串和数字
#        其中反引号和 repr() 是一致的, 是函数, 而 str 是一种对象类型
a = 321
print("abc" + `a`)      # 使用反引号
print("abc" + str(a))   # 使用str()
print("abc" + repr(a))  # 使用repr()

# ==> 转义字符
#     \ (在行尾时)续航符; \ 反斜杠符号; \' 单引号; \" 双引号; \a 响铃; \b 退格; \e 转义;
#     \000 空;  \n 换行;  \v 纵向制表符;  \t 横向制表符;  \r 回车;  \f 换页;
#     \oyy 八进制数, yy 代表字符, eg. \o12代表换行
#     \xyy 十六进制数, yy代表字符, eg. \x0a代表换行
#     \other 其他的字符以普通格式输出

# =======================================================================================================================
# string
# =======================================================================================================================

a = "what's your name"
# a. 内建函数
#    ==> 字母大写
print(a.upper())
#    ==> 字母小写
print(a.lower())
#    ==> 首字母大写
print(a.capitalize())
#    ==> 单词的首字母是否为大写, 且其他为小写
print(a.istitle())
print('Qiwsir,Github'.istitle())
print('This Is A Book'.istitle())
#    ==> 是否全大写
print(a.isupper())
#    ==> 是否全小写
print(a.islower())
#    ==> 去掉左右空格
print(' name '.strip())

# =======================================================================================================================
# 字符集和字符编码 (charset & encoding)
# =======================================================================================================================

# 详解[http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html]
# 一、基础知识
#    1. 计算机中存储的信息都是用二进制数表示的.
#    2. 编码: a字符转化为二进制数据的过程
#    3. 解码: 二进制数据解析成a字符的过程
#    4. 乱码: 解码中使用了错误的解码规则导致的
#    5. 字符集: 系统支持的所有抽象字符的集合; 各种文字和符号的总称
#    6. 字符编码: 将符号转换为计算机可以接受的数字系统的数字代码的过程
#    7. 常用字符集和字符编码
#       a. ASCII字符集
#       b. GB2312字符集
#       c. BIG5字符集
#       d. GB18030字符集
#       e. Unicode字符集
#
# 二、字符集
#    1. ASCII字符集
#       a. American Standard Code for Information Interchange 美国信息交换标准代码
#       b. 主要包括控制字符(回车键\退格\换行键等)、可显示字符(英文大小写字符、阿拉伯数字、西文符号)
#       c. 最大缺点就是只能显示26个基本拉丁字母、阿拉伯数字和英式标点符号。
#       d. EASCII
#    2. GBXXXXX字符集
#       a. 为了显示中文, GB2312, 把127之后的奇异字符(即EASCII)取消掉, 规定: 一个小于127的字符的意义和燕来一样, 但是大于127的字符列在
#          一起时, 就表示一个汉字, 前面字节(称之为高字节)从 oxA1用到 oxF7, 后面一个字节(低字节)从 oxA1到0xFE, 这样就组合大约7000多汉
#          字.在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两
#          个字节长的编码，这就是常说的"全角"字符，而原来在127号以下的那些就叫"半角"字符了。
#       b. 由于人名、古汉语等方面出现的罕用字, 导致了 GBK及 GB18030汉字字符集的出现
#       c. GB 18030，全称：国家标准GB 18030-2005《信息技术 中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000
#          《信息技术 信息交换用汉字编码字符集 基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB 13000及Unicode的
#           全部统一汉字，共收录汉字70244个。GB 18030主要有以下特点：
#               a. 与UTF-8相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。
#               b. 编码空间庞大，最多可定义161万个字符。
#               c. 支持中国国内少数民族的文字，不需要动用造字区。
#               d. 汉字收录范围包含繁体汉字以及日韩汉字
#   3. BIG5字符集
#      a. 又称为大五码或五大码
# 三、Unicode
#     a. Unicode 编码系统为表达任意语言的任意字符而设计。统一码、万国码、单一码、标准万国码
#     b. 使用4个字节的数字来表达每个字符、符号, 或者表意文字
#     c. 可以这么理解: unicode 是字符集, UTF-32/UTF-16/UTF-8是三种字符编码方案
#     d. UTF-32: 使用4个字节来表示
#     e. UTF-16: 使用2个字节来表示
#        UTF-16编码最明显的优点是它在空间效率上比UTF-32高两倍，因为每个字符只需要2个字节来存储（除去65535范围以外的），而不是UTF-32中
#        的4个字节。并且，如果我们假设某个字符串不包含任何星芒层中的字符，那么我们依然可以在常数时间内找到其中的第N个字符，直到它不成立为
#        止这总是一个不错的推断。其编码方法是：
#           1. 如果字符编码U小于0x10000，也就是十进制的0到65535之内，则直接使用两字节表示；
#           2. 如果字符编码U大于0x10000，由于UNICODE编码范围最大为0x10FFFF，从0x10000到0x10FFFF之间 共有0xFFFFF个编码，也就是需要
#              20个bit就可以标示这些编码。用U'表示从0-0xFFFFF之间的值，将其前 10 bit作为高位和16 bit的数值0xD800进行 逻辑or 操作，
#              将后10 bit作为低位和0xDC00做 逻辑or 操作，这样组成的 4个byte就构成了U的编码。
#     f. UTF-8:
#        1. UTF-8(8-bit Unicode Transformation Format), 是一种针对unicode 的可变长度字符编码(定长码), 也是一种前缀码。
#        2. 可以用来表示 Unicode 标准中的任何字符, 且其编码中的第一字节仍与 ASCII兼容
#        3. UTF-8使用1至4个字节为每个字符编码:
#        ==> a. 128个US-ASCII 字符只需要1个字节编码(Unicode范围由U+0000至U+007F)
#        ==> b. 带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文、它拿字母需要两个字节(U+0080至U+07FF)
#        ==> c. 其他基本多文种平面(BMP)中的字符(包含了大部分常用字)使用三个字节编码
#        ==> d. 其他极少使用的Unicode 辅助平面的字符使用四字节编码
#        4. 优点:
#        ==> a. UTF-8是ASCII的超集
# 四、HTTP中 Accept-Charset/Content-Type
#    ==> 1. Accept-Charset: 浏览器声明自己接受的字符集, 这就是前文介绍的各种字符集和字符编码, 如gb2312、utf-8
#        2. Accept-Encoding: 浏览器声明自己接受的编码方法, 通常指定压缩方法, 是否支持压缩, 支持什么压缩方法(gzip, deflate)
#        3. Accept-Language: 浏览器声明自己接受的语言. 语言跟字符集的区别: 中文是语言, 中文有很多字符集, 如 big5, gb2312, gbk 等
#        4. Content-Type: 服务器告诉浏览器自己响应的对象的类型和字符集. 如 Content-Type: text/html; charset='gb2312'
#        5. Content-Encoding: 服务器表明自己使用了什么压缩方法(gzip, deflate)压缩响应中的对象. e.g. Content-Encoding: gzip
#        6. Content-Language: 服务器告诉浏览器自己响应对象的语言
